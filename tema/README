322CA Celescu Rares
	
	Pentru aceasta tema am considerat mai multe clase necesare, fiecare
	fiind intr-un pachet sugestiv numelui. In pachetul main sunt prezente
	doar clasele Main si Test, cele prezente deja in schelet, in pachetul
	gameClasses in schimb fiind clasele care se ocupa cu jocul efectiv si
	logica din spate, cum ar fi clasa Board care reprezinta o matrice de 
	Card-uri, unde se pot plasa sau se scoate Carduri conform comenzii date,
	clasa Deck unde se tin deck-urile playerilor formate din mai multe 
	obiecte de tip Card, clasa Output unde se gestioneaza comenzile
	de input pentru actiuni si se afiseaza outputul pentru fiecare caz,
	dar de asemenea se si aplica logica fiecarei comenzi, clasa Package
	care reprezinta un pachetul cu toate deckurile fiecarui player, clasa
	Player ce se ocupa cu logica din spatele fiecarui player si cele 2 
	clase de joc PlayGame si StartGame. In pachetul heros exista clasa Hero,
	definita la mod general si 4 clase care extind clasa Hero, pentru 
	fiecare tip de erou posibil. In pachetul fileio si checker nu am
	schimbat nimic din schelet, iar in cards am clasa Card ce
	reprezinta o carte generala, extinsa de Minion si Tank, Minion
	la randul lor fiind extins de clasa SpecialCard ce este extinsa
	de fiecare posibilitate de carte speciala.
	
	In clasa Main, pentru inceperea jocului doar fac o instanta de joc
	cu parametrii necesari trimisi in constructor si intru in metoda
	play, unde iterez fiecare joc si setez obiectul de startGame prin
	metoda setGame cu parametrii necesari inceperii fiecarui joc, de 
	apelez functia iterateActions care itereaza prin fiecare actiune
	din jocul curent si executa comanda, facand si outputul, dar asta in
	clasa Output.
	Pentru metoda setGame din clasa startGame instantiez o noua tabla
	de joc si fac setez pachetul fiecarui player ce ii contine deckurile
	prin metoda makePack din clasa Package, metoda ce itereaza prin
	ArrayListul de ArrayList de CardInput si pentru fiecare deck bagat
	in pack(ArrayList de Deckuri) itereaza prin fiecare carte si o baga
	in deck, astfel facand fiecare deck cu fiecare carte si bagandu-le
	intr-un ArrayList de Deckuri(pentru fiecare player). Apoi instantiez
	clasele de Player cu fiecare player, setandu-le pachetul si numarul
	de deckuri in constructor. Apoi, se iau detaliile inceputului de joc
	si se seteaza shuffle seedul, starting playerul, current turn, iar 
	pentru fiecare player se seteaza hero-ul, deck-ul cu care va juca si
	mana de inceput. Apoi se vor amesteca cartile din deck-ul de start si
	se va pune prima carte in mana, eliminandu-se din deck, precum si
	runda se va seta pe 1. Hand-ul fiecarui player este un ArrayList de
	Cards, iar la inceputul fiecarei runde daca mai exista carti in deck
	se va extrage prima si se va pune la finalul ArrayListului de Cards,
	adica in mana.
	
	In clasa Output gestionez primirea comenzilor si afisarea outputurilor,
	precum si resetarea rundelor si logica din spatele fiecarei comenzi.
	Pentru resetarea rundei am un contor care numara de fiecare data cand
	se termina tura unui player, iar cand acesta este divizibil cu 2 se
	reseteaza runda, adica se incrementeaza numarul rundei, se pune o carte
	in mana daca e posibil, se reseteaza cartile frozen si care au atacat
	de pe tabla, la fel si eroii ce au atacat si se incrementeaza mana
	pentru fiecare jucator.
	Pentru gestionarea comenzilor de input am facut un switch-case care
	itereaza ArrayListul de actiuni si aplica metoda corespunzatoare
	actiunii necesare, tratand si cazurile de eroare.
	Pentru o modularizare mai buna a codului am folosit metode speciale
	care trateaza erorile si care printeaza outputul dorit, pentru a ma
	putea refolosi de codul deja scris unde a fost nevoie.
	In fiecare functie din output se verifica prima data erorile(unde e
	cazul), iar apoi daca nu s-au gasit si nu s-a iesit deja din functie
	se va aplica metoda scrisa pentru acel tip de comanda.
	
	In clasa Board am o matrice de carduri, tipul dinamic al fiecarui
	card fiind desigur un alt tip de clasa(folosirea mostenirei), iar
	fiecarui tip de abilitate speciala corespunzandu-i o metoda noua
	suprascrisa in clasa copil(in cazul cartilor cu abilitati speciale).
	Logica din aceasta clasa e usor de inteles, am getter-ele si setter-ele
	necesare si cateva functii simple cum ar fi placeCard care pune o carte
	pe masa, in functie de randul asignat cartii si playerului care o pune,
	doar daca acel rand are macar o pozite libera. Metoda de getCardsOnTable
	imi returneaza un ArrayList de cards, cea isFull verifica un rand daca
	e sau nu plin, cea de reset reseteaza cartile de pe tabla, iar restul
	metodelor sunt ori de verificare(daca o carte e frozen/ daca exista
	tank si nu e atacat) ori de folosirea attackului a unei carti
	pe alta, In metoda eliminateCard am eliminat cartea omorata, shiftand
	toate cartile din dreapta ei la stanga si re-instantiind ultima carte
	cu un nou Minion, pentru a nu ramane 2 carti la fel pe rand.
	
	Pentru abilitatile eroilor cat si cele ale cartilor speciale am folosit
	metodele de mostenire si polimorfism(overloading), in metoda makePack
	cand am luat fiecare carte i-am pus tipul static de Card iar tipul
	dinamic in functie de numele ei, la fel si la eroi. In rest am 
	respectat cerinta si am implementat fiecare metoda conform conditiilor
	necesare. In plus, in clasa PlayGame am si variabilele pentru
	afisarea statisticilor, precum gameNumber, playerOneWins,
	playerTwoWins, iar in metoda iterateActions din output pasez si
	instanta obiectului curent, iar cand este nevoie de aceste statistici
	se incrementeaza / se afiseaza la output, folosind getter-ele
	si setter-ele specifice.
	
	  
